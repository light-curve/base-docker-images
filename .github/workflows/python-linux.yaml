name: Images based on many/musllinux

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '38 08 13 * *'
  workflow_dispatch:

concurrency:
  group: "python-linux"
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./python-linux

jobs:
  ceres:
    name: Build Ceres Solver library
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: manylinux
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: musllinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: manylinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: musllinux
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Build and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} ceres --arch=${{ matrix.arch }}

  ceres-manifest:
    needs: [ ceres ]
    name: Bind Ceres Solver images into a single one
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ "manylinux", "musllinux" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Create and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} manifest --tag=ceres

  fftw:
    name: Build FFTW library
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: manylinux
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: musllinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: manylinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: musllinux
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Build and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} fftw --arch=${{ matrix.arch }}

  fftw-manifest:
    needs: [ fftw ]
    name: Bind FFTW images into a single one
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ "manylinux", "musllinux" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Create and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} manifest --tag=fftw

  gsl:
    name: Build GSL library
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # We don't need it for MUSL
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: manylinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: manylinux
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Build and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} gsl --arch=${{ matrix.arch }}

  gsl-manifest:
    needs: [ gsl ]
    name: Bind GSL images into a single one
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ "manylinux" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Create and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} manifest --tag=gsl

  latest:
    needs: [ ceres-manifest, fftw-manifest, gsl-manifest ]
    name: Build base images
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: manylinux
          - os: ubuntu-24.04-arm
            arch: aarch64
            platform: musllinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: manylinux
          - os: ubuntu-24.04
            arch: x86_64
            platform: musllinux
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Build and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} latest --arch=${{ matrix.arch }}

  latest-manifest:
    needs: [ latest ]
    name: Build latest images into a single manifest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ "manylinux", "musllinux" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Login to registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
      - name: Install deps
        run: python3 -mpip install -r requirements.txt
      - name: Create and push
        run: ./build.py ${{ github.ref != 'refs/heads/master' && '--no-push' || '' }} --platform=${{ matrix.platform }} manifest --tag=latest